{"ast":null,"code":"var _jsxFileName = \"/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const LOCAL_STORAGE_KEY = \"contacts\";\n  const [contacts, setContacts] = useState([]);\n  const addContactHandler = contact => {\n    // you never directly manupulate contacts directly, you will \n    // update contacts using setContacts, i want to get the previous state of contacts using rest\n    // rest is defined as '...contacts'\n    setContacts([...contacts, contact]);\n  };\n  useEffect(() => {\n    const retrieveContacts = Json.parse(localStorage.getItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts)));\n    if (retrieveContacts) setContacts = retrieveContacts;\n  }, [contacts]);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContact, {\n      addContactHandler: addContactHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: contacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WajkMADgk+4Cka/G5/8OzNt4WxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","AddContact","ContactList","jsxDEV","_jsxDEV","App","_s","LOCAL_STORAGE_KEY","contacts","setContacts","addContactHandler","contact","retrieveContacts","Json","parse","localStorage","getItem","JSON","stringify","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\n\nfunction App() {\n  const LOCAL_STORAGE_KEY = \"contacts\";\n  const [contacts, setContacts] = useState([]);\n  \n  const addContactHandler = (contact) => {\n    // you never directly manupulate contacts directly, you will \n    // update contacts using setContacts, i want to get the previous state of contacts using rest\n    // rest is defined as '...contacts'\n    setContacts([...contacts, contact]);\n  };\n\n  useEffect(() => {\n    const retrieveContacts = Json.parse(localStorage.getItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts)))\n    if (retrieveContacts )setContacts = retrieveContacts\n  }, [contacts]);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts))\n  }, [contacts]);\n  return (\n    <div className=\"ui container\">  \n      <Header/>\n      <AddContact addContactHandler={addContactHandler}/>\n      <ContactList contacts={contacts}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,iBAAiB,GAAG,UAAU;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMY,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACA;IACA;IACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEG,OAAO,CAAC,CAAC;EACrC,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACT,iBAAiB,EAAEU,IAAI,CAACC,SAAS,CAACV,QAAQ,CAAC,CAAC,CAAC;IACtG,IAAII,gBAAgB,EAAEH,WAAW,GAAGG,gBAAgB;EACtD,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EACdT,SAAS,CAAC,MAAM;IACdgB,YAAY,CAACI,OAAO,CAACZ,iBAAiB,EAAEU,IAAI,CAACC,SAAS,CAACV,QAAQ,CAAC,CAAC;EACnE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EACd,oBACEJ,OAAA;IAAKgB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BjB,OAAA,CAACJ,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTrB,OAAA,CAACH,UAAU;MAACS,iBAAiB,EAAEA;IAAkB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnDrB,OAAA,CAACF,WAAW;MAACM,QAAQ,EAAEA;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAACnB,EAAA,CAzBQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA2BZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}