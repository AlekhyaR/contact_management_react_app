{"ast":null,"code":"var _jsxFileName = \"/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = contact => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {\n      id: uuidv4(),\n      ...contacts\n    }]);\n  };\n  const removeContactHandler = id => {};\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (retrieveContacts.length > 0) {\n      setContacts(retrieveContacts);\n    }\n  }, []);\n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContact, {\n      addContactHandler: addContactHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: contacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WajkMADgk+4Cka/G5/8OzNt4WxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","v4","uuidv4","Header","AddContact","ContactList","jsxDEV","_jsxDEV","App","_s","LOCAL_STORAGE_KEY","contacts","setContacts","addContactHandler","contact","id","removeContactHandler","retrieveContacts","JSON","parse","localStorage","getItem","length","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\n\nfunction App() {\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = (contact) => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {id: uuidv4(), ...contacts}]);\n  };\n\n  const removeContactHandler = (id) => {\n    \n  }\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (retrieveContacts.length > 0) {\n      setContacts(retrieveContacts);\n    }\n  }, []); \n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return (\n    <div className=\"ui container\">  \n      <Header />\n      <AddContact addContactHandler={addContactHandler} />\n      <ContactList contacts={contacts} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,iBAAiB,GAAG,UAAU;;EAEpC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMc,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAACI,EAAE,EAAEb,MAAM,CAAC,CAAC;MAAE,GAAGS;IAAQ,CAAC,CAAC,CAAC;EACzD,CAAC;EAED,MAAMK,oBAAoB,GAAID,EAAE,IAAK,CAErC,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd,MAAMiB,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACX,iBAAiB,CAAC,CAAC;IAC5E,IAAIO,gBAAgB,CAACK,MAAM,GAAG,CAAC,EAAE;MAC/BV,WAAW,CAACK,gBAAgB,CAAC;IAC/B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjB,SAAS,CAAC,MAAM;IACdoB,YAAY,CAACG,OAAO,CAACb,iBAAiB,EAAEQ,IAAI,CAACM,SAAS,CAACb,QAAQ,CAAC,CAAC;EACnE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,oBACEJ,OAAA;IAAKkB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BnB,OAAA,CAACJ,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVvB,OAAA,CAACH,UAAU;MAACS,iBAAiB,EAAEA;IAAkB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDvB,OAAA,CAACF,WAAW;MAACM,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV;AAACrB,EAAA,CAtCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}