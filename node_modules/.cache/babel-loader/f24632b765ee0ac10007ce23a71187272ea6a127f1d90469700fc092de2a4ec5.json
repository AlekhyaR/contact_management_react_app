{"ast":null,"code":"var _jsxFileName = \"/Users/alekhya/alekhya/my_projects/react_contact_app/src/components/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport api from \"../api/contacts\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport ContactDetail from \"./ContactDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // retrieve contacts\n  const retrieveContacts = async () => {\n    const response = await api.get(\"/contacts\");\n    return response.data;\n  };\n\n  // Handler to add a new contact\n  const addContactHandler = contact => {\n    const request = {\n      id: uuidv4()\n    };\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {\n      id: uuidv4(),\n      ...contact\n    }]);\n  };\n  const removeContactHandler = id => {\n    // create copy of contacts \n    const newContactList = contacts.filter(contact => {\n      return contact.id !== id;\n    });\n    setContacts(newContactList);\n  };\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    // const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    // if (retrieveContacts.length > 0) {\n    //   setContacts(retrieveContacts);\n    // }\n    const getAllContacts = async () => {\n      const allContacts = await retrieveContacts();\n      if (allContacts.length > 0) setContacts(allContacts);\n    };\n    getAllContacts();\n  }, []);\n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    // localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          element: /*#__PURE__*/_jsxDEV(ContactList, {\n            contacts: contacts,\n            getContactId: removeContactHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/add\",\n          element: /*#__PURE__*/_jsxDEV(AddContact, {\n            addContactHandler: addContactHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/contact/:id\",\n          element: /*#__PURE__*/_jsxDEV(ContactDetail, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WajkMADgk+4Cka/G5/8OzNt4WxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","v4","uuidv4","api","Header","AddContact","ContactList","ContactDetail","jsxDEV","_jsxDEV","App","_s","LOCAL_STORAGE_KEY","contacts","setContacts","retrieveContacts","response","get","data","addContactHandler","contact","request","id","removeContactHandler","newContactList","filter","getAllContacts","allContacts","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","exact","element","getContactId","_c","$RefreshReg$"],"sources":["/Users/alekhya/alekhya/my_projects/react_contact_app/src/components/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport api from \"../api/contacts\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport ContactDetail from \"./ContactDetail\";\n\nfunction App() {\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // retrieve contacts\n  const retrieveContacts = async () => {\n    const response = await api.get(\"/contacts\");\n    return response.data;\n  }\n\n  // Handler to add a new contact\n  const addContactHandler = (contact) => {\n    const request = {\n      id: uuidv4(),\n      \n    }\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {id: uuidv4(), ...contact}]);\n  };\n\n  const removeContactHandler = (id) => {\n    // create copy of contacts \n    const newContactList = contacts.filter((contact) => {\n      return contact.id !== id;\n    })\n    setContacts(newContactList)\n  }\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    // const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    // if (retrieveContacts.length > 0) {\n    //   setContacts(retrieveContacts);\n    // }\n    const getAllContacts = async () => {\n      const allContacts = await retrieveContacts();\n      if (allContacts.length > 0) setContacts(allContacts);\n    }\n    getAllContacts();\n  }, []); \n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    // localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return (\n    <div className=\"ui container\">\n      <Router>\n        <Header />\n        <Routes>\n          <Route path=\"/\" exact element={\n            <ContactList \n              contacts={contacts} \n              getContactId={removeContactHandler}/>\n            } \n          />\n          <Route path=\"/add\" element={\n              <AddContact \n                addContactHandler={addContactHandler}/>\n            }\n          />\n          <Route path=\"/contact/:id\" element={<ContactDetail/>}/>\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}