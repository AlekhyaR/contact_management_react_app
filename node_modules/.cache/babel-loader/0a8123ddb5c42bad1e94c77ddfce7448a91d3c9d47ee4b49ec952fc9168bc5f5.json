{"ast":null,"code":"var _jsxFileName = \"/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = contact => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, contact]);\n  };\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const storedContacts = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (storedContacts.length > 0) {\n      const retrieveContacts = JSON.parse(storedContacts);\n      console.log(\"Retrieved Contacts from localStorage:\", retrieveContacts);\n      if (retrieveContacts.length > 0) {}\n      setContacts(retrieveContacts);\n    }\n  }, []);\n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContact, {\n      addContactHandler: addContactHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: contacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WajkMADgk+4Cka/G5/8OzNt4WxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","AddContact","ContactList","jsxDEV","_jsxDEV","App","_s","LOCAL_STORAGE_KEY","contacts","setContacts","addContactHandler","contact","storedContacts","localStorage","getItem","length","retrieveContacts","JSON","parse","console","log","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekhya/alekhya/my_projects/contact-app/src/components/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\n\nfunction App() {\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = (contact) => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, contact]);\n  };\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const storedContacts = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (storedContacts.length > 0) {\n      const retrieveContacts = JSON.parse(storedContacts);\n      console.log(\"Retrieved Contacts from localStorage:\", retrieveContacts);\n      if (retrieveContacts.length > 0) {}\n      setContacts(retrieveContacts);\n    }\n    \n  }, []); \n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return (\n    <div className=\"ui container\">  \n      <Header />\n      <AddContact addContactHandler={addContactHandler} />\n      <ContactList contacts={contacts} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,iBAAiB,GAAG,UAAU;;EAEpC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMY,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEG,OAAO,CAAC,CAAC;EACrC,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC;IAC9D,IAAIK,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACN,cAAc,CAAC;MACnDO,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEJ,gBAAgB,CAAC;MACtE,IAAIA,gBAAgB,CAACD,MAAM,GAAG,CAAC,EAAE,CAAC;MAClCN,WAAW,CAACO,gBAAgB,CAAC;IAC/B;EAEF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjB,SAAS,CAAC,MAAM;IACdc,YAAY,CAACQ,OAAO,CAACd,iBAAiB,EAAEU,IAAI,CAACK,SAAS,CAACd,QAAQ,CAAC,CAAC;EACnE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,oBACEJ,OAAA;IAAKmB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BpB,OAAA,CAACJ,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACH,UAAU;MAACS,iBAAiB,EAAEA;IAAkB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDxB,OAAA,CAACF,WAAW;MAACM,QAAQ,EAAEA;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV;AAACtB,EAAA,CAtCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}