{"ast":null,"code":"var _jsxFileName = \"/Users/alekhya/alekhya/my_projects/react_contact_app/src/components/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = contact => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {\n      id: uuidv4(),\n      ...contact\n    }]);\n  };\n  const removeContactHandler = id => {\n    // create copy of contacts \n    const newContactList = contacts.filter(contact => {\n      return contact.id !== id;\n    });\n    setContacts(newContactList);\n  };\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (retrieveContacts.length > 0) {\n      setContacts(retrieveContacts);\n    }\n  }, []);\n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: [/*#__PURE__*/_jsxDEV(Router, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContact, {\n      addContactHandler: addContactHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: contacts,\n      getContactId: removeContactHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WajkMADgk+4Cka/G5/8OzNt4WxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","v4","uuidv4","Header","AddContact","ContactList","jsxDEV","_jsxDEV","App","_s","LOCAL_STORAGE_KEY","contacts","setContacts","addContactHandler","contact","id","removeContactHandler","newContactList","filter","retrieveContacts","JSON","parse","localStorage","getItem","length","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getContactId","_c","$RefreshReg$"],"sources":["/Users/alekhya/alekhya/my_projects/react_contact_app/src/components/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\n\nfunction App() {\n  // Define a key to use for local storage\n  const LOCAL_STORAGE_KEY = \"contacts\";\n\n  // Initialize state to hold the list of contacts\n  const [contacts, setContacts] = useState([]);\n\n  // Handler to add a new contact\n  const addContactHandler = (contact) => {\n    // Spread the existing contacts and add the new contact to the array\n    setContacts([...contacts, {id: uuidv4(), ...contact}]);\n  };\n\n  const removeContactHandler = (id) => {\n    // create copy of contacts \n    const newContactList = contacts.filter((contact) => {\n      return contact.id !== id;\n    })\n    setContacts(newContactList)\n  }\n\n  // useEffect to retrieve contacts from local storage when the component mounts\n  useEffect(() => {\n    const retrieveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (retrieveContacts.length > 0) {\n      setContacts(retrieveContacts);\n    }\n  }, []); \n\n  // useEffect to store the contacts in local storage whenever contacts state changes\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Render the UI\n  return (\n    <div className=\"ui container\">\n      <Router></Router>  \n      <Header />\n      <AddContact addContactHandler={addContactHandler} />\n      <ContactList contacts={contacts} getContactId={removeContactHandler}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,iBAAiB,GAAG,UAAU;;EAEpC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMkB,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAACI,EAAE,EAAEb,MAAM,CAAC,CAAC;MAAE,GAAGY;IAAO,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,MAAME,oBAAoB,GAAID,EAAE,IAAK;IACnC;IACA,MAAME,cAAc,GAAGN,QAAQ,CAACO,MAAM,CAAEJ,OAAO,IAAK;MAClD,OAAOA,OAAO,CAACC,EAAE,KAAKA,EAAE;IAC1B,CAAC,CAAC;IACFH,WAAW,CAACK,cAAc,CAAC;EAC7B,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,MAAMuB,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACb,iBAAiB,CAAC,CAAC;IAC5E,IAAIS,gBAAgB,CAACK,MAAM,GAAG,CAAC,EAAE;MAC/BZ,WAAW,CAACO,gBAAgB,CAAC;IAC/B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvB,SAAS,CAAC,MAAM;IACd0B,YAAY,CAACG,OAAO,CAACf,iBAAiB,EAAEU,IAAI,CAACM,SAAS,CAACf,QAAQ,CAAC,CAAC;EACnE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,oBACEJ,OAAA;IAAKoB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BrB,OAAA,CAACT,MAAM;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACjBzB,OAAA,CAACJ,MAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACH,UAAU;MAACS,iBAAiB,EAAEA;IAAkB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDzB,OAAA,CAACF,WAAW;MAACM,QAAQ,EAAEA,QAAS;MAACsB,YAAY,EAAEjB;IAAqB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV;AAACvB,EAAA,CA3CQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}